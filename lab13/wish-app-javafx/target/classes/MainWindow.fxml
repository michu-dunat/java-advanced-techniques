<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.control.ComboBox?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.control.ListView?>
<?import javafx.scene.control.TextArea?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.VBox?>
<?language javascript?>

<!--
  Copyright (c) 2015, 2019, Gluon and/or its affiliates.
  All rights reserved. Use is subject to license terms.

  This file is available and licensed under the following license:

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions
  are met:

  - Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.
  - Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in
    the documentation and/or other materials provided with the distribution.
  - Neither the name of Oracle Corporation nor the names of its
    contributors may be used to endorse or promote products derived
    from this software without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->

<VBox fx:id="vBox" prefHeight="800.0" prefWidth="700.0" xmlns="http://javafx.com/javafx/15.0.1" xmlns:fx="http://javafx.com/fxml/1">

    <fx:script>
        var strategies = ["Losowo", "Kolejno", "Najdłuższe", "Najkrótsze"];
        var styles = ["Domyślny", "Nocny", "Fioletowy"];
        var Main = Java.type("org.example.Main");
        var File = Java.type("java.io.File");
        var FXCollections = Java.type("javafx.collections.FXCollections");
        var fileListForView = FXCollections.observableArrayList();
        var System = Java.type("java.lang.System");
        var ThreadLocalRandom = Java.type("java.util.concurrent.ThreadLocalRandom");
        var BufferedReader = Java.type("java.io.BufferedReader");
        var FileReader = Java.type("java.io.FileReader");
        var counter = 0;
        var String = Java.type("java.lang.String");
        var DirectoryChooser = Java.type("javafx.stage.DirectoryChooser");
        var fileList;

        function loadWishButtonOnAction() {
            var directoryChooser = new DirectoryChooser();
            var dir = directoryChooser.showDialog(null);
            fileList = dir.listFiles();
            for (i in fileList)
                fileListForView.add(fileList[i].getName())
            templateListView.setItems(fileListForView);
            templateListView.getSelectionModel().selectFirst();
            load(fileList);
        }

        function initialize() {
            styleComboBox.getItems().addAll(styles);
            styleComboBox.getSelectionModel().selectFirst();
            strategyComboBox.getItems().addAll(strategies);
            strategyComboBox.getSelectionModel().selectFirst();

            nameTextField.setText("Michał");

        }

        function styleComboBoxOnAction() {
            var id = styleComboBox.getSelectionModel().getSelectedIndex();
            var scene = vBox.getScene();
            scene.getStylesheets().clear();

            switch(id) {
                case 0:
                    scene.getStylesheets().add(Main.class.getResource("/styles/application.css").toExternalForm());
                    break;
                case 1:
                    scene.getStylesheets().add(Main.class.getResource("/styles/dark.css").toExternalForm());
                    break;
                case 2:
                    scene.getStylesheets().add(Main.class.getResource("/styles/purple.css").toExternalForm());
                    break;
                default:
                    break;
            }
        }

        function printWish(index) {
            var name = nameTextField.getText() + ", ";
            switch(templateListView.getSelectionModel().getSelectedIndex()) {
                case 0:
                    wishTextArea.setText(name + array0[index])
                    break;
                case 1:
                    wishTextArea.setText(name + array1[index])
                    break;
                case 2:
                    wishTextArea.setText(name + array2[index])
                    break;
                case 3:
                    wishTextArea.setText(name + array3[index])
                    break;

            }
        }

        var array0 = []
        var array1 = []
        var array2 = []
        var array3 = []

        function load(fileList) {
            for (x in fileList) {
                var wishType = fileList[x].listFiles();
                for (i in wishType) {
                    var br = new BufferedReader(new FileReader(wishType[i]));

                    var st;
                    var wish = "";
                    while ((st = br.readLine()) != null)
                        wish += new String(st.getBytes(),"UTF-8") + "\n";

                    switch(x) {
                        case 0:
                            array0.push(wish);
                            break;
                        case 1:
                            array1.push(wish);
                            break;
                        case 2:
                            array2.push(wish);
                            break;
                        case 3:
                            array3.push(wish);
                            break;
                    }
                }
            }

            array0.sort(compare);
            array1.sort(compare);
            array2.sort(compare);
            array3.sort(compare);
        }

        function compare(a, b) {
            return a.length - b.length;
        }

        function generateButtonOnAction() {
            if (nameTextField.getText() == "") {
                return null;
            }

            var id = templateListView.getSelectionModel().getSelectedIndex();
            var wishes = fileList[id].listFiles();

            switch(strategyComboBox.getSelectionModel().getSelectedIndex()) {
                case 0:
                    var randomInt = ThreadLocalRandom.current().nextInt(0, wishes.length);
                    printWish(randomInt);
                    break;
                case 1:
                    printWish(counter % wishes.length);
                    counter += 1;
                    break;
                case 2:
                    printWish(wishes.length - 1);
                    break;
                case 3:
                    printWish(0);
                    break;
                default:
                    break;
            }
        }

    </fx:script>
  <children>
    <AnchorPane maxHeight="-1.0" maxWidth="-1.0" prefHeight="-1.0" prefWidth="-1.0" VBox.vgrow="ALWAYS">
         <children>
            <ComboBox fx:id="styleComboBox" layoutX="536.0" layoutY="23.0" onAction="styleComboBoxOnAction()" prefWidth="150.0" />
            <TextArea fx:id="wishTextArea" layoutX="26.0" layoutY="556.0" prefHeight="200.0" prefWidth="649.0" wrapText="true" />
            <TextField fx:id="nameTextField" layoutX="100.0" layoutY="35.0" />
            <ListView fx:id="templateListView" layoutX="290.0" layoutY="88.0" prefHeight="372.0" prefWidth="369.0" />
            <Label layoutX="26.0" layoutY="524.0" text="Życzenia:" />
            <ComboBox fx:id="strategyComboBox" layoutX="99.0" layoutY="76.0" prefWidth="150.0" />
            <Label layoutX="37.0" layoutY="39.0" text="Imię:" />
            <Label layoutX="38.0" layoutY="80.0" text="Strategia:" />
            <Label layoutX="290.0" layoutY="60.0" text="Szablony:" />
            <Label layoutX="448.0" layoutY="27.0" text="Styl interfejsu:" />
            <Button fx:id="generateButton" layoutX="290.0" layoutY="482.0" mnemonicParsing="false" onAction="generateButtonOnAction()" text="Wygeneruj życzenia" />
            <Button fx:id="loadWishButton" layoutX="122.0" layoutY="262.0" mnemonicParsing="false" onAction="loadWishButtonOnAction()" text="Załaduj szablony" />
         </children>
    </AnchorPane>
  </children>
    <fx:script>
        initialize()
    </fx:script>
</VBox>
